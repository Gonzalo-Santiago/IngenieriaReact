{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GONZALO\\\\Documents\\\\706\\\\Ingenieria de software II\\\\react\\\\mi-app-modular\\\\src\\\\context\\\\ThemeContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\n\n// 1. Creamos el Contexto\n// Le damos un valor inicial (opcional) que puede ser usado por los consumidores\n// si no están envueltos en un Provider.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext({\n  theme: 'light',\n  toggleTheme: () => {}\n});\n\n// 2. Creamos el Componente \"Proveedor\"\n// Este componente envolverá nuestra aplicación y proveerá el estado real.\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState('light'); // 'light' o 'dark'\n\n  // Función para cambiar el tema\n  const toggleTheme = () => {\n    setTheme(currentTheme => currentTheme === 'light' ? 'dark' : 'light');\n  };\n\n  // 3. Pasamos el estado actual y la función para cambiarlo\n  // a todos los componentes hijos a través del 'value' prop.\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"c/tiXTWXTQispzpG//dV5FX41vQ=\");\n_c = ThemeProvider;\nexport default ThemeContext;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","ThemeContext","theme","toggleTheme","ThemeProvider","children","_s","setTheme","currentTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/GONZALO/Documents/706/Ingenieria de software II/react/mi-app-modular/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\n\n// 1. Creamos el Contexto\n// Le damos un valor inicial (opcional) que puede ser usado por los consumidores\n// si no están envueltos en un Provider.\nconst ThemeContext = createContext({\n  theme: 'light',\n  toggleTheme: () => {},\n});\n\n// 2. Creamos el Componente \"Proveedor\"\n// Este componente envolverá nuestra aplicación y proveerá el estado real.\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light'); // 'light' o 'dark'\n\n  // Función para cambiar el tema\n  const toggleTheme = () => {\n    setTheme(currentTheme => (currentTheme === 'light' ? 'dark' : 'light'));\n  };\n\n  // 3. Pasamos el estado actual y la función para cambiarlo\n  // a todos los componentes hijos a través del 'value' prop.\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeContext;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;;AAEtD;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGJ,aAAa,CAAC;EACjCK,KAAK,EAAE,OAAO;EACdC,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC,CAAC;;AAEF;AACA;AACA,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACJ,KAAK,EAAEK,QAAQ,CAAC,GAAGT,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;;EAE7C;EACA,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACxBI,QAAQ,CAACC,YAAY,IAAKA,YAAY,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACzE,CAAC;;EAED;EACA;EACA,oBACER,OAAA,CAACC,YAAY,CAACQ,QAAQ;IAACC,KAAK,EAAE;MAAER,KAAK;MAAEC;IAAY,CAAE;IAAAE,QAAA,EAClDA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACR,EAAA,CAfWF,aAAa;AAAAW,EAAA,GAAbX,aAAa;AAiB1B,eAAeH,YAAY;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}